#!/usr/bin/env ruby

require "rubygems"
require "bundler/setup"
require "newrelic_plugin"
require 'etc'

require 'sidekiq'
require 'sidekiq/api'
require 'redis'

module NewRelic
  module Plugin
    class Run
      def loop_forever_dropped_uid
        user = @config.agents[:user] || 'nobody'
        begin
          passwd = Etc.getpwnam(user)
          Process::Sys.setuid(passwd.uid) if passwd and passwd.uid != 0
        rescue ArgumentError => err
          PlatformLogger.warn("WARNING: User '#{user}' does not exist. Continuing execution as '#{Etc.getlogin}'")
        ensure
          loop_forever_original
        end

      end
      alias :loop_forever_original :loop_forever
      alias :loop_forever :loop_forever_dropped_uid
    end
  end
end

module SidekiqStatusAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid "com.secondimpression.newrelic-sidekiq-agent"
    agent_config_options :instance_name, :uri, :namespace, :user
    agent_version '0.0.2'
    agent_human_labels('Sidekiq') { instance_name }

    def setup_metrics
      @total_failed = NewRelic::Processor::EpochCounter.new
      @processed    = NewRelic::Processor::EpochCounter.new
    end

    def poll_cycle
      if uri.nil?
        raise "Redis connection URL missing"
      end

      Sidekiq.configure_client do |config|
        config.redis = { :url => uri, :namespace => namespace }
      end

      begin
        stats = Sidekiq::Stats.new
        workers = Sidekiq::Workers.new

        report_metric "Workers/Working", "Workers",           workers.size
        report_metric "Jobs/Pending", "Jobs",                 stats.enqueued
        report_metric "Jobs/Processed", "Jobs",               stats.processed
        report_metric "Jobs/Rate/Processed", "Jobs/Second",   @processed.process(stats.processed)
        report_metric "Jobs/Rate/Failed", "Jobs/Second",      @total_failed.process(stats.failed)
        report_metric "Jobs/Failed", "Jobs",                  stats.failed || 0

        stats.queues.each do |name, enqueued|
          report_metric "Queues/#{name}", "Enqueued", enqueued
        end

      rescue Redis::TimeoutError
        raise 'Redis server timeout'
      rescue  Redis::CannotConnectError, Redis::ConnectionError
        raise 'Could not connect to redis'
      rescue Exception => e
        raise 'Could not connect to redis'
      end
    end

  end

  NewRelic::Plugin::Config.config_file = File.dirname(__FILE__) + '/config/newrelic_plugin.yml'
  NewRelic::Plugin::Setup.install_agent :sidekiq_status_agent, self

  NewRelic::Plugin::Run.setup_and_run

end

